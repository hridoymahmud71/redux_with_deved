{"ast":null,"code":"var _jsxFileName = \"H:\\\\Hridoy\\\\redux_with_deved\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}), document.getElementById('root')); //STORE -> Globalized State\n//ACTION -> Increment\n\nconst increment = () => {\n  return {\n    type: 'INCREMENT'\n  };\n};\n\nconst decrement = () => {\n  return {\n    type: 'DECREMENT'\n  };\n}; //REDUCER -> is gonna check what to do\n\n\nconst counter = (state = 0, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return state + 1;\n\n    case \"DECREMENT\":\n      return state - 1;\n  }\n};\n\nlet store = createStore(counter);\nstore.subscribe(() => console.log(store.getState())); //DISPATCIHNG\n\nstore.dispatch(increment());\nstore.dispatch(decrement());\nstore.dispatch(decrement()); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["H:/Hridoy/redux_with_deved/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","render","document","getElementById","increment","type","decrement","counter","state","action","store","subscribe","console","log","getState","dispatch","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACAH,QAAQ,CAACI,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;;AACA,MAAMC,SAAS,GAAG,MAAM;AACpB,SAAO;AACHC,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAKA,MAAMC,SAAS,GAAG,MAAM;AACpB,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD,C,CAKA;;;AACA,MAAME,OAAO,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AACnC,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAK,WAAL;AACI,aAAOG,KAAK,GAAG,CAAf;;AACJ,SAAK,WAAL;AACI,aAAOA,KAAK,GAAE,CAAd;AAJR;AAMH,CAPD;;AASA,IAAIE,KAAK,GAAGV,WAAW,CAACO,OAAD,CAAvB;AAEAG,KAAK,CAACC,SAAN,CAAgB,MAAIC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAApB,E,CAEA;;AACAJ,KAAK,CAACK,QAAN,CAAeX,SAAS,EAAxB;AACAM,KAAK,CAACK,QAAN,CAAeT,SAAS,EAAxB;AACAI,KAAK,CAACK,QAAN,CAAeT,SAAS,EAAxB,E,CAEA;AACA;AACA;;AACAP,aAAa,CAACiB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\nReactDOM.render(<App />, document.getElementById('root'));\n\n//STORE -> Globalized State\n//ACTION -> Increment\nconst increment = () => {\n    return {\n        type: 'INCREMENT'\n    }\n}\nconst decrement = () => {\n    return {\n        type: 'DECREMENT'\n    }\n}\n//REDUCER -> is gonna check what to do\nconst counter = (state = 0, action) => {\n    switch (action.type) {\n        case \"INCREMENT\":\n            return state + 1;\n        case \"DECREMENT\":\n            return state -1;\n    }\n}\n\nlet store = createStore(counter);\n\nstore.subscribe(()=>console.log(store.getState())); \n\n//DISPATCIHNG\nstore.dispatch(increment());\nstore.dispatch(decrement());\nstore.dispatch(decrement());\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}